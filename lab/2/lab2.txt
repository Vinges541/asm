10.09.2019

Пример виртуальной машины.

Регистры:
4-х байтовые регистры общего назначения R0 - R31
4-х байтовый указатель инструкций IP (программно недоступен)

Память:
адресное пространство размером 4 МБ

Количество регистров и размер памяти легко могут быть изменены.
Память доступна программно для чтения и записи.
Код загружается по фиксированному адресу и регистр IP настраивается так, чтобы указывать на его начало.

Доступные операции:
nop
in  [byte] R*
out [byte] R*/imm
mov [byte] R*, [byte] R*/imm
add [byte] R*, [byte] R*/imm
sub [byte] R*, [byte] R*/imm
xor [byte] R*, [byte] R*/imm
and [byte] R*, [byte] R*/imm
or  [byte] R*, [byte] R*/imm


Все инструкции кодируются 11-ю байтами. Первый байт - опкод, затем по 5 байт на два операнда. Первый байт операнда кодирует его тип (отсутствие операнда, младший байт регистра, регист, непосредственное значение, значение в памяти), остальные 4 - значение (непосредственное значение, номер регистра).
Если инструкция имеет меньше 2 операндов, то байты, соответствующие недействительным операндам, игнорируются.
Такое кодирование не оптимально с точки зрения размера кода, зато значительно облегчает ассемблирование и декодирование инструкций.


Ассемблер для виртуальной машины реализован на языке Perl.
Разбор строк исходного кода на языке ассемблера осуществляется с помощью регулярных выражений.


Ассемблирование файла с исходным кодом code.asm в бинарный файл code.bin
# perl vmasm.pl code.asm code.bin


Эмулятор в каталоге examples\emulator2
