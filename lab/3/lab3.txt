17.09.2019

Функции на языке ассемблера.

Для реализации функций на языке ассемблера предназначены специальные директивы ассемблера и соответствующие ресурсы процессора. Функция представляет собой логически законченный блок кода, обрабатывающий переданные аргументы и возвращающий значение.

Передавать аргументы можно 3 способами:
1) через глобальную память;
на практике не применяется, так как таким образом нельзя вызывать рекурсивные функции.
2) через регистры;
применяется для ускорения вызова функций.
3) через стек;
стандартный способ, имеющий поддержку со стороны процессора.

Если аргументы передаются через регистры, можно использовать для этого разные регистры. Об этом вызывающая и вызываемая функция должны договориться: если вызывающая помещает первый аргумент, допустим, в eax, а второй - в ebx, то и вызывающая должна забирать первый аргумент из eax, а второй - из ebx.
Аналогично, передавать аргументы через стек можно разными способами. И об этом тоже нужно договариваться: какой аргумент помещается в стек первым, какой вторым и т.д.
Такая договорённость называется соглашением (декларацией, нотацией) о вызове функций. Кроме передачи аргументов соглашение определяет, как очищается стек от переданных аргументов, в случае передачи через стек. Стек может очищать вызывающая функция (прибавляя к esp нужное число: add esp, N), либо вызываемая (инструкцией retn N), где N - размер в байтах переданных параметров.

Соглашения о вызове функций:
1) cdecl 	стандартная декларация языка Си
Аргументы передаются в стек с конца к началу, стек очищает вызывающая функций.
Пример вызова функции main:
	push envp
	push argv
	push argc
	call main
	add esp, 12

2) stdcall	стандартная декларация в системе Windows
Аргументы передаются в стек с конца к началу, стек очищает вызывающая функция.
Пример вызова функции main:
	push envp
	push argv
	push argc
	call main
в конце функции main:
	retn 12

3) pascal
Аргументы передаются в стек с начала к концу, стек очищает вызываемая функция.

4) fastcall
Аргументы передаются через регистры, если аргументов слишком много, то оставшиеся передаются через стек.
Существуют разные способы передачи аргументов через регистры, зависящие от платформы.


Стековый фрейм.
Данные, специфичные для отдельного вызова функции (переданные аргументы, адрес возврата, локальные переменные) сохраняются в стековом фрейме функции, который динамически формируется в стеке перед исполнением основного кода функции. 
Аргументы помещаются в стек в вызывающей функции, адрес возврата помещается в стек инструкцией call. После этого управление передаётся функции, которая завершает формирование своего стекового фрейма в стандатном прологе:
  push ebp	    ; сохраняем регистр, чтобы восстановить его перед выходом
  mov ebp, esp	; устнавливаем базу стекового фрейма
  sub esp, xx	; резервируем в стеке место под локальные переменные

Обратные действия выполняются в стандартном эпилоге:
  mov esp, ebp	; либо add esp, xx
  pop ebp	    ; восстанавливаем сохраненное значение
  ret		    ; снимаем со стека адрес возврата и передаем по нему управление


        +-----------+  0xFFFFFFFF
        |           |
        |           |
        +-----------+ _
        |           |  \
        |           |   >  стековый фрейм предыдущей функции
        |           | _/
        +-----------+
        |   arg n   |
        |    ...    |  аргументы функции (если аргументы передаются через стек)
        |   arg 1   |
        +-----------+
        |  ret addr |  адрес возврата (4 байта)
        +-----------+
        |   ebp     |  сохранённое значение регистра ebp (4 байта)
 ebp -> +-----------+ _
        |           |  \
        |           |  |
        |           |  |
        |           |   > локальные переменные
        |           |  |
        |           |  |
        |           | _/
 esp -> +-----------+
        |           |
        |           |
        |           |
        |           |
        |           |
        |           |
        |           |
        |           |
        +-----------+  0x00000000

Обращение к локальным переменным и аргументам, расположенным в стековом фрейме
осуществляется через регистр ebp.
[ebp+08h] - первый 4-х байтовый аргумент
[ebp+0Ch] - второй 4-х байтовый аргумент
[ebp-04h] - первая 4-х байтовая локальная переменная
[ebp-08h] - вторая 4-х байтовая локальная переменная
