03.12.2019

Ассемблеры для x64

1. masm 64 (ml64.exe) - ассемблер, поставляемый вместе с Visual Studio.
По сравнению с 32-х разрядной версией была урезана функциональность.
В частности, не доступны директивы assume, invoke.

2. jwasm - 16-ти, 32-х и 64-х разрядный ассемблер, совместимый с синтаксисом
masm. Для x64 функциональность не урезана.

3. goAsm - ассемблер из набора "Go", включающего ассемблер, компилятор ресурсов,
линковщик, отладчик.

4. fasm - кросплатформенный ассемблер. Не совместим синтаксисом с masm.



Заголовочные файлы.

Заголовочные файлы из проекта masm32 не подходят для 64-х разрядной системы.
Для Win64 можно предложить следующие решения:
1. Сгенерировать заголовочные файлы для ассемблера самостоятельно
из стандартных заголовочных файлов Windows с помощью утилиты h2inc.

2. Использовать уже сгенерированные этой утилитой файлы из проекта WinInc.
Это заголовочные файлы для платформ Win32, Win64, совместимые с masm и jwasm.

3. Использовать заголовочный файлы из проекта "Go", совместимые с goAsm и не совместимые с masm.

4. Использовать заголовочные файлы masm64 из проекта библиотеки dsmhelp.
Файлы совместимы с masm. В файле temphls.inc объявлены макросы. В частности,
invoke, .if, .elseif, .else, .endif, .while, .repeat.



Соглашение о вызове функций.

В стандартных библиотеках Win64 (kernel32.dll, user32.dll, msvcrt.dll) 
используется соглашение о вызовах fastcall (вместо stdcall и cdecl).
Это соглашение предписывает первые 4 параметра передавать через регистры:
целочисленные аргументы:
rcx
rdx
r8
r9
вещественные аргументы:
xmm0
xmm1
xmm2
xmm3
Остальные аргументы кладутся в стек справа налево (как в stdcall).

Хотя первые четыре аргумента передаются через регистры в стеке необходимо зарезервировать место, будто бы они передаются через стек. Обращение к аргументам, переданным через стек (начиная с 5 аргумента) будет происходить с учетом этого зарезервированного места:

	fun proc
		; первый аргумент	rcx
		; второй аргумент	rdx
		; третий аргумент	r8
		; четвертый аргумент	r9
		; пятый аргумент	[rsp+28h]
		; шестой аргумент	[rsp+30h]
	fun endp

	push n-th_arg
	...
	push fifth_arg
	sub rsp, 20h		; резервирование места для первых четырёх аргументов
	mov rcx, first_arg
	mov rdx, second_arg
	mov r8,  third_arg
	mov r9,  fourth_arg
	call fun

Целочисленные значения возвращаются через регистр rax, вещественные - xmm0.

Также соглашение предписывает какие регистры не должны изменяться после завершения функции (если они используются внутри функции, в прологе функции они должны быть сохранены, а в эпилоге восстановлены).
Могут изменяться:
rax, rcx, rdx, r8-r11, xmm0-xmm5
Должны быть сохранены:
rdi, rsi, rbx, rbp, rsp, r12-r15, xmm6-xmm15

В прологе функции стек должен быть выровнен по границе 16 байт.
Если это не сделать, то программа может упасть при вызове функции системной библиотеки.

Аргументы из стека очищает вызывающая функция.


https://msdn.microsoft.com/en-us/library/windows/hardware/ff561499(v=vs.85).aspx
https://msdn.microsoft.com/ru-ru/library/ew5tede7.aspx
https://msdn.microsoft.com/ru-ru/library/ms235286.aspx
https://msdn.microsoft.com/ru-ru/library/02c56cw3.aspx



Примеры

1. template, hello
Пример проекта с ассемблером ml64.
Для поддержки ассемблера со стороны студии определены пользовательские правила построения, файл с которым
находится вместе с проектом (masm64.rules).
В примере не используются заголовочные файлы, поэтому все функции перед использованием необходимо описать самостоятельно.

2. masm64
Пример проекта с ассеблером ml64 и заголовочными файлами masm64.
Пользовательские правила построения в файле masm64.rules.

3. masm
Пример проекта с ассеблером ml64, заголовочными файлами WinInc
и макросами из masm64.
Пользовательские правила построения в файле masm64.rules.

4. jwasm
Пример проекта с ассеблером jwasm, заголовочными файлами WinInc
и макросами из masm64.
Пользовательские правила построения в файле jwasm.rules.
Для сборки 64-х разрядного кода необходимо это указать в свойствах проекта:
JWasm Assembler->Object File->Output Format = COFF 64-bit
Также в свойствах проекта необходимо прописать пути до заголовочных файлов:
JWasm Assembler->General->Include Paths = c:\wininc\include


Наиболее предпочтительным представляется последний вариант: jwasm + WinInc.
Так как получаем ассемблер, совместимый по синтаксису и директивам с привычным masm, и поддерживаемый набор заголовочных файлов, совместимый с masm.
