26.11.2019


Архитектура x64

Архитектура x64 (AMD64, x86-64, EM64T, IA-32e, Intel 64) является расширением архитектуры IA-32 с практически полной обратной совместимостью. Это 64-х разрядная архитектура, что означает 64-х разрядные адреса и регистры общего назначения.

8 регистров общего назначения были расширены с 32 до 64 бит.
Было добавлено 8 новых регистров общего назначения.
Регистры общего назначения:
64		32		16		8	8
rax		eax		ax		ah	al
rbx		ebx		bx		bh	bl
rcx		ecx		cx		ch	cl
rdx		edx		dx		dh	dl
rsi		esi		si			sil
rdi		edi		di			dil
rbp		ebp		bp			bpl
rsp		esp		sp			spl
r8		r8d		r8w			r8b
r9		r9d		r9w			r9b
r10		r10d	r10w		r10b
r11		r11d	r11w		r11b
r12		r12d	r12w		r12b
r13		r13d	r13w		r13b
r14		r14d	r14w		r14b
r15		r15d	r15w		r15b

eip расширен до rip
eflags расширен до rflags

Остались 3 сегментных регистра: cs, fs, gs



Система команд

В x64 появились особенности использования инструкций. Некоторые инструкции могут работать только с 32-х разрядными операндами, некоторые только с 64-х разрядными, а какие-то и с теми и с другими.

Демонстрация особенностей работы инструкций в примере examples/reg.

1) Больше недоступны команды:
- команды работы с десятичными упакованными числами: aaa, aad, aam, aas, daa, das
- bound
- pushad/popad
- команды работы с сегментными регистрами ds, ss, es, cs.


2) Адресация памяти.

Виртуальные адреса стали 64-х битными. При этом в инструкции указать полный 64-х битный адрес можно только через 64-х битный регистр:
  mov rbx, [rax]
Задать 64-х битный адрес в виде непосредственного значения не получится. Т.е. недоступны команды вида:
  mov rbx, [0x1122334455667788]
Можно использовать только 32-х битные смещения.
  mov rbx, [0x11223344]
  mov rbx, [rax + 0x11223344]
Ясно, что одним лишь 32-х битным смещением можно адресовать только нижние 4 ГБ адресного пространства. Поэтому был введен новый способ адресации - относительно регистра rip (для команд передачи управления этот режим существовал всегда). Он используется компилятором masm всегда при обращении к именованным адресам (меткам, переменным):
  mov rax, [var]
  lea rax, [var]


3) Команда mov

Данные можно пересылать между регистрами одной разрядности (8, 16, 32, 64). За исключением байтовых регистров ah, bh, ch, dh, которые не могут участвовать в одной инструкции с новыми байтовыми регистрами.

В 64-х битовые регистры можно загружать непосредственное значение размером
8 байт:
  mov rax, 1122334455667788h
  mov rax, qword ptr 0
либо 4 байта (переданное значение знаково расширяется до 8 байт):
  mov rax, 0
  mov rax, dword ptr 0
  mov rax, word ptr 0
  mov rax, byte ptr 0
Также можно загружать 8 байт из памяти:
  mov rax, qword ptr [qvar]

В 32-х разрядные регистры можно загружать 4 байтовые непосредственные значения, значения из памяти или из регистров:
  mov eax, 0
  mov eax, dword ptr 0
  mov eax, word ptr 0
  mov eax, byte ptr 0
  mov eax, dword ptr [dvar]
  mov eax, ebx
При этом обнуляются старшие 32 бита соответствующего 64-х разрядного регистра.
Поэтому есть команда знакового расширения
  movsqd rax, ebx
но нет команда беззнакового расширения movzxd, потому как загрузка значения в 32-х разрядный регистр автоматически беззнаково расширяет его до 64-х бит.

Непосредственное 64-х битовое значение можно загружать только в регистр. В память можно загрузить только 32-х битовое значение. При этом в память будет помещено либо 4 байта (*qvar = 0xAAAAAAAA):
  mov dword ptr [qvar], dword ptr 0AAAAAAAAh
  mov dword ptr [qvar], 0AAAAAAAAh
либо 8 байт, знаково расширенные с 4 (*qvar = 0xFFFFFFFFAAAAAAAA):
  mov qword ptr [qvar], dword ptr 0AAAAAAAAh
  mov qword ptr [qvar], 0AAAAAAAAh


4) Команды push/pop

Поместит в стек можно только 64-х и 16-ти разрядные регистры:
  push rax
  push ax
Непосредственное значение может быть:
4 байтовым (в стек помещается 8 байт, знаково расширенные с 4):
  push dword ptr 0AAAAAAAAh
2 байтовым (в стек помещается 2 байта):
  push word ptr 0AAAAh
1 байтовым (в стек помещается 8 байт, знаково расширенные с 1):
  push byte ptr 0AAh
Непосредственное значение не может быть 64-х битовым, поэтому не возможна такая команда:
  push offset var
Для этого необходимо использовать вспомогательный регистр:
  mov rax, offset var
  push rax
или
  lea rax, [var]
  push rax


5) Арифметические команды

Над 64-х, 16-ти, 8-ми разрядными регистрами операции осуществляются обычным образом.
32-х разрядные регистры знаково расширяются до соответствующих 64-х разрядных
и операции осуществляется над 64-х разрядными регистрами:
  mov eax, 0FFFFFFFFh	; rax = 0FFFFFFFFh
  add eax, 1	; rax = 0


6) Логические команды

Над 64-х, 32-х, 16-ти, 8-ми разрядными регистрами операции осуществляются обычным образом.


7) Команды передачи управления

Вызов функции можно осуществить 
через 64-х разрядный регистры:
  call rax
через память:
  call qword ptr [rax]
  call qword ptr [eax]
  call qword ptr [qvar]
относительно (4-х байтовое смещение)
  call M1

Безусловный переход можно осуществить через 64-х разрядный регистр:
  jmp rax
через память:
  jmp qword ptr [qvar]
  jmp qword ptr [rax]
относительно (1 байтовое смещение):
  jmp short M
относительно (4 байтовое смещение):
  jmp near ptr M

Условный переход можно осуществить
относительно (1 байтовое смещение):
  je short M
относительно (4 байтовое смещение):
  je near ptr M

